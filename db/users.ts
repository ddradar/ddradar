import type { Api, Database } from '@ddradar/core'

import type { Condition } from './database'
import { fetchList, fetchOne } from './database'

/**
 * Returns {@link Database.UserSchema} that matches id.
 * @param id User id (Auto generated by Azure Authentication)
 */
export function fetchUser(id: string): Promise<Database.UserSchema | null> {
  return fetchSpecifiedUser({ condition: 'c.id = @', value: id })
}

/**
 * Returns {@link Database.UserSchema} that matches loginId.
 * @param loginId User login id (displayed Id)
 */
export function fetchLoginUser(
  loginId: string
): Promise<Database.UserSchema | null> {
  return fetchSpecifiedUser({ condition: 'c.loginId = @', value: loginId })
}

function fetchSpecifiedUser(condition: Condition<'Users'>) {
  return fetchOne(
    'Users',
    ['id', 'loginId', 'name', 'area', 'code', 'isPublic', 'password'],
    condition
  )
}

/**
 * Returns user data that matches conditions.
 * @param loginId User login id (displayed Id)
 * @param area {@link Database.AreaCode}
 * @param name User name (partial match)
 * @param code DDR code
 */
export function fetchUserList(
  loginId: string,
  area?: Database.AreaCode,
  name?: string,
  code?: number
): Promise<Api.UserInfo[]> {
  const columns = ['id', 'name', 'area', 'code'] as const
  const cond: Condition<'Users'>[] = [
    { condition: '(c.isPublic = true OR c.loginId = @)', value: loginId },
    { condition: 'IS_DEFINED(c.loginId)' },
  ]
  if (area !== undefined) cond.push({ condition: 'c.area = @', value: area })
  if (name) cond.push({ condition: 'CONTAINS(c.name, @, true)', value: name })
  if (code) cond.push({ condition: 'c.code = @', value: code })

  return fetchList('Users', columns, cond, { name: 'ASC' })
}
