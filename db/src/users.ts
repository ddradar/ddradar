import type { UserSchema } from '@ddradar/core'

import type { Condition } from './database'
import { fetchOne } from './database'

/**
 * Returns {@link UserSchema} that matches `id`.
 * @param id User id (displayed Id)
 */
export function fetchUser(id: string): Promise<UserSchema | null> {
  return fetchSpecifiedUser({ condition: 'c.id = @', value: id })
}

/**
 * Returns {@link UserSchema} that matches `loginId`.
 * @param loginId User login id (Auto generated by Azure Authentication)
 */
export function fetchLoginUser(loginId: string): Promise<UserSchema | null> {
  return fetchSpecifiedUser({ condition: 'c.loginId = @', value: loginId })
}

function fetchSpecifiedUser(condition: Condition<'Users'>) {
  return fetchOne(
    'Users',
    ['id', 'loginId', 'name', 'area', 'code', 'isPublic', 'password'],
    condition
  )
}
