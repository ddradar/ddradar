import {
  hasIntegerProperty,
  hasProperty,
  hasStringProperty,
} from '../type-assert'
import { Condition, fetchList, fetchOne } from '.'

export type UserSchema = {
  /** User ID */
  id: string
  /**
   * Auto generated by Azure Authentication.
   * Not defined for DDRadar's system users, like area top.
   */
  loginId?: string
  name: string
  area: AreaCode
  /** DDR Code */
  code?: number
  /** `true` if this user info is public, otherwize `false`. */
  isPublic: boolean
}

export type AreaCode =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22
  | 23
  | 24
  | 25
  | 26
  | 27
  | 28
  | 29
  | 30
  | 31
  | 32
  | 33
  | 34
  | 35
  | 36
  | 37
  | 38
  | 39
  | 40
  | 41
  | 42
  | 43
  | 44
  | 45
  | 46
  | 47
  | 48
  | 49
  | 50
  | 51
  | 52
  | 53
  | 106
  | 107
  | 108
  | 109
  | 110
  | 111
  | 112
  | 113
  | 114
  | 115
  | 116
  | 117
  | 118

export const areaCodeList: AreaCode[] = [
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
]

export function isUserSchema(obj: unknown): obj is UserSchema {
  return (
    hasStringProperty(obj, 'id', 'name') &&
    /^[-a-z0-9_]+$/.test(obj.id) &&
    hasIntegerProperty(obj, 'area') &&
    (areaCodeList as number[]).includes(obj.area) &&
    (!hasProperty(obj, 'code') ||
      (hasIntegerProperty(obj, 'code') &&
        obj.code >= 10000000 &&
        obj.code <= 99999999)) &&
    hasProperty(obj, 'isPublic') &&
    typeof obj.isPublic === 'boolean'
  )
}

export function fetchUser(id: string): Promise<UserSchema | null> {
  return fetchOne<UserSchema>(
    'Users',
    ['id', 'loginId', 'name', 'area', 'code', 'isPublic'],
    [{ condition: 'c.id = @', value: id }]
  )
}

export function fetchLoginUser(loginId: string): Promise<UserSchema | null> {
  return fetchOne<UserSchema>(
    'Users',
    ['id', 'loginId', 'name', 'area', 'code', 'isPublic'],
    [{ condition: 'c.loginId = @', value: loginId }]
  )
}

type UserListData = Omit<UserSchema, 'loginId' | 'isPublic'>
export function fetchUserList(
  loginId: string,
  area?: AreaCode,
  name?: string,
  code?: number
): Promise<UserListData[]> {
  const columns = ['id', 'name', 'area', 'code'] as const
  const cond: Condition[] = [
    { condition: '(c.isPublic = true OR c.loginId = @)', value: loginId },
  ]
  if (area !== undefined) cond.push({ condition: 'c.area = @', value: area })
  if (name) cond.push({ condition: 'CONTAINS(c.name, @, true)', value: name })
  if (code) cond.push({ condition: 'c.code = @', value: code })
  cond.push({ condition: 'IS_DEFINED(c.loginId)' })
  return fetchList<UserListData>('Users', columns, cond, { name: 'ASC' })
}
