import { z } from 'zod'

/** zod schema object for {@link User}. */
export const userSchema = z.object({
  /**
   * User ID
   * @remarks Area user's ID is same as area code.
   */
  id: z
    .string()
    .min(1)
    .max(32)
    .regex(/^[a-zA-Z][-a-zA-Z0-9_]+$/),
  /** User name */
  name: z.string().min(1),
  /**
   * Area number that depend on official site.
   * @description
   * - `0`: 未設定 / Undefined
   * - `1`-`47`: Japan Prefectures (北海道 - 沖縄県)
   * - `48`: 香港 / Hong Kong
   * - `49`: 韓国 / Korea
   * - `50`: 台湾 / Taiwan
   * - `51`: アメリカ合衆国 / USA
   * - `52`: ヨーロッパ / Europe
   * - `53`: 海外 / Overseas
   * - `54`-`104` : United States (Alaska - Washington, D.C.)
   * - `105`: 日本 / Japan
   * - `106`: カナダ / Canada
   * - `107`: シンガポール / Singapore
   * - `108`: タイ / Thailand
   * - `109`: オーストラリア / Australia
   * - `110`: ニュージーランド / New Zealand
   * - `111`: イギリス / UK
   * - `112`: イタリア / Italy
   * - `113`: スペイン / Spain
   * - `114`: ドイツ / Germany
   * - `115`: フランス / France
   * - `116`: ポルトガル / Portugal
   * - `117`: インドネシア / Indonesia
   * - `118`: フィリピン / Philippines
   */
  area: z.number().int().min(0).max(118),
  /** DDR Code */
  code: z.number().int().min(10000000).max(99999999).optional(),
  /** `true` if this user info is public, otherwize `false`. */
  isPublic: z.boolean(),
})
/**
 * User data object
 * @example
 * ```json
 * {
 *   "id": "sample_user",
 *   "name": "Sample User",
 *   "area": 13,
 *   "code": 10000000,
 *   "isPublic": true
 * }
 * ```
 */
export type User = z.infer<typeof userSchema>

/** Area enum object */
export const Area = {
  Undefined: 0,
  Australia: 109,
  Canada: 106,
  Europe: 52,
  France: 115,
  Germany: 114,
  HongKong: 48,
  Indonesia: 117,
  Italy: 112,
  Japan: 105,
  Korea: 49,
  NewZealand: 110,
  Philippines: 118,
  Portugal: 116,
  Singapore: 107,
  Spain: 113,
  Taiwan: 50,
  Thailand: 108,
  UK: 111,
  USA: 51,
  Overseas: 53,
  北海道: 1,
  青森県: 2,
  岩手県: 3,
  宮城県: 4,
  秋田県: 5,
  山形県: 6,
  福島県: 7,
  茨城県: 8,
  栃木県: 9,
  群馬県: 10,
  埼玉県: 11,
  千葉県: 12,
  東京都: 13,
  神奈川県: 14,
  新潟県: 15,
  富山県: 16,
  石川県: 17,
  福井県: 18,
  山梨県: 19,
  長野県: 20,
  岐阜県: 21,
  静岡県: 22,
  愛知県: 23,
  三重県: 24,
  滋賀県: 25,
  京都府: 26,
  大阪府: 27,
  兵庫県: 28,
  奈良県: 29,
  和歌山県: 30,
  鳥取県: 31,
  島根県: 32,
  岡山県: 33,
  広島県: 34,
  山口県: 35,
  徳島県: 36,
  香川県: 37,
  愛媛県: 38,
  高知県: 39,
  福岡県: 40,
  佐賀県: 41,
  長崎県: 42,
  熊本県: 43,
  大分県: 44,
  宮崎県: 45,
  鹿児島県: 46,
  沖縄県: 47,
  Alabama: 55,
  Alaska: 54,
  Arizona: 57,
  Arkansas: 56,
  California: 58,
  Colorado: 59,
  Connecticut: 60,
  Delaware: 61,
  Florida: 62,
  Georgia: 63,
  Hawaii: 64,
  Idaho: 66,
  Illinois: 67,
  Indiana: 68,
  Iowa: 65,
  Kansas: 69,
  Kentucky: 70,
  Louisiana: 71,
  Maine: 74,
  Maryland: 73,
  Massachusetts: 72,
  Michigan: 75,
  Minnesota: 76,
  Mississippi: 78,
  Missouri: 77,
  Montana: 79,
  Nebraska: 80,
  NorthCarolina: 81,
  NorthDakota: 82,
  NewHampshire: 83,
  NewJersey: 84,
  NewMexico: 85,
  NewYork: 87,
  Nevada: 86,
  Ohio: 88,
  Oklahoma: 89,
  Oregon: 90,
  Pennsylvania: 91,
  RhodeIsland: 92,
  SouthCarolina: 93,
  SouthDakot: 94,
  Tennessee: 95,
  Texas: 96,
  Utah: 97,
  Vermont: 99,
  Virginia: 98,
  Washington: 100,
  WashingtonDC: 104,
  WestVirginia: 102,
  Wisconsin: 101,
  Wyoming: 103,
} as const
/** Set for {@link User.area} */
export const areaCodeSet: ReadonlySet<number> = new Set([...Array(119).keys()]) // 0-118

/**
 * Returns the area that includes the specified area
 * @param area - Area code
 * @returns
 * - Japan Prefectures returns `105`(Japan).
 * - United States returns `51`(USA).
 * - Europe countries returns `52`(Europe).
 * - Overseas countries returns `53`(Overseas).
 * - Other returns `0`(Undefined).
 */
export function findLargerArea(area: User['area']): User['area'] {
  if (area >= Area.北海道 && area <= Area.沖縄県) return Area.Japan // Japan Prefectures(1-47)
  if (area >= Area.Alaska && area <= Area.WashingtonDC) return Area.USA // United States(54-104)
  if (area >= Area.UK && area <= Area.Portugal) return Area.Europe // Europe(111-116)
  // Overseas(48-52, 106-110, 117-118)
  if (!([Area.Undefined, Area.Japan, Area.Overseas] as number[]).includes(area))
    return Area.Overseas
  return 0
}

/**
 * Returns user is Area user (generated by system) or not.
 */
export function isAreaUser(
  user: Pick<User, 'id'>
): user is { id: `${User['area']}` } {
  return [...areaCodeSet].map(i => `${i}`).includes(user.id)
}
